<?phpnamespace App\Http\Controllers;use App\Http\Requests;use App\Models\Item;use App\Models\Warehouse;use Illuminate\Http\Request;class WarehouseController extends Controller{    private $formInputList;    private $baseRouteName = 'warehouse';    private $modelUsing    = Warehouse::class;    private $title         = 'Warehouse Management';    private $tableColumn   = [        'x' => 'Position X',        'y' => 'Position Y',    ];    private $rules = [        'x' => 'required|integer',        'y' => 'required|integer|min:1',    ];    public function __construct() {        $this->middleware('auth');        $this->formInputList  = [            'Position X' => [                'name' => 'x',                'type' => 'number',            ],            'Position Y' => [                'name' => 'y',                'type' => 'number',            ],        ];    }    public function index() {        $variables = [            'title'         => $this->title,            'itemList'      => $this->modelUsing::get(),            'baseRouteName' => $this->baseRouteName,            'formInputList' => $this->formInputList,            'tableColumn'   => $this->tableColumn,        ];        return view('crud.template', $variables);    }    public function store(Request $request) {        $this->validate($request, $this->rules);        $inputs = $request->all();        $x = $inputs['x'];        $y = $inputs['y'];        $z = 1;        if($this->modelUsing::where('x', $x)->where('y', $y)->where('z', $z)->count()) {            return redirect()->back()->with('error', 'This position is already !');        }        $item    = new $this->modelUsing;        $item->x = $inputs['x'];        $item->y = $inputs['y'];        $item->z = 1;        $item->save();        return redirect()->back()->with('success', 'Added !');    }    public function show($id) {        $item = $this->modelUsing::find($id);        if($item) {            return $item->toJson();        }        return [];    }    public function update(Request $request, $id) {        $item = $this->modelUsing::find($id);        if($item) {            $this->validate($request, $this->rules);            $inputs = $request->all();            $x = $inputs['x'];            $y = $inputs['y'];            $z = 1;            if($this->modelUsing::where('x', $x)->where('y', $y)->where('z', $z)->where('id', '!=', $id)->count()) {                return redirect()->back()->with('error', 'This position is already !');            }            $item->x = $inputs['x'];            $item->y = $inputs['y'];            $item->z = 1;            $item->save();            return redirect()->back()->with('success', 'Edited !');        }        return redirect()->back()->with('error', 'Error !');    }    public function destroy($id) {        $item = $this->modelUsing::find($id);        if($item) {            $item->delete();            return redirect()->back()->with('success', 'Deleted !');        }        return redirect()->back()->with('error', 'Error !');    }    public function showMonitor() {        $warehouseList       = Warehouse::orderBy('y')->with('items')->get();        $itemInWarehouseList = Item::where('status', '<=', Item::STATUS_IN_WAREHOUSE)->with('warehouse')->get();        $deadstockIndex = Item::getDeadstockList();        foreach($deadstockIndex as $index => $item) {            $deadstockIndex[$index] = [$item->warehouse->x, $item->warehouse->y];        }        $tableSize     = [            'maxX' => Warehouse::max('x'),            'maxY' => Warehouse::max('y'),        ];        return view('warehouse.monitor', compact('warehouseList', 'tableSize', 'deadstockIndex', 'itemInWarehouseList'));    }    public function getItem(Request $request) {        $returnData = [];        $x          = $request->input('x');        $y          = $request->input('y');        if(!is_null($x) && !is_null($y)) {            $warehouseList = Warehouse::where('x', $x)->where('y', $y)->orderBy('z', 'ASC')->get();            foreach($warehouseList as $warehouse) {                $item = $warehouse->getItemInStock();                if($item) {                    $data = [                        'item_id'      => $item->id,                        'RFID'         => $item->product->RFID,                        'product_name' => $item->product->name,                        'company_name' => $item->product->company->name,                        'imported_at'  => $item->created_at->format('d-m-Y H:i:s'),                        'deadstock_in' => $item->created_at->addDays($item->product->deadstock_period)->diffForHumans(),                        'deadstock'    => $item->getDeadstockPeriod() > 0 ? false : true,                    ];                    $returnData[] = $data;                } else {                    $returnData[] = 'available';                }            }        }        return $returnData;    }    public function postExport(Request $request, $id) {        $item = Item::find($id);        if($item) {            if($item->status == Item::STATUS_IN_WAREHOUSE) {                $item->status = Item::STATUS_AT_OUT_ZONE;                $item->save();                $x = $item->warehouse->x;                $y = $item->warehouse->y;                $z = $item->warehouse->z;                $warehounseSize  = Warehouse::where('x', $x)->where('y', $y)->count();                 $warehouseId     = Warehouse::where('x', $x)->where('y', $y)->pluck('id');                 $itemInWarehouse = Item::where('status', Item::STATUS_IN_WAREHOUSE)->whereIn('warehouse_id', $warehouseId)->count();                                $hasDeadstock     = false;                foreach(Warehouse::where('x', $x)->where('y', $y)->get() as $warehouse) {                    $item = $warehouse->getItemInStock();                    if($item && $item->getDeadstockPeriod() <= 0) $hasDeadstock = true;                }                return [                    'title'         => 'Success',                     'message'       => 'Exported !',                    'type'          => 'success',                     'x'             => $x,                     'y'             => $y,                    'remaining'     => $itemInWarehouse,                    'warehouseSize' => $warehounseSize,                    'hasDeadstock'  => $hasDeadstock,                    'str'           => 'o'.$x.$y.$z.'z',                ];            }        }        return ['title' => 'Error', 'message' => 'Error something went wrong !', 'type' => 'error'];    }}